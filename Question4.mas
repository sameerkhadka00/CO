    ORG 100          // Start at address 100
    LOAD ZERO        // Initialize sum to 0
    STORE SUM

    LOAD COUNTER     // Load the counter value (3 in this case)
    STORE COUNTER

ADD_LOOP, LOAD SUM   // Load the current sum
    ADD NUMBER       // Add the number (4 in this example) to the sum
    STORE SUM        // Store the new sum

    LOAD COUNTER     // Load the current counter
    SUBT ONE         // Decrement the counter
    STORE COUNTER    // Store the new counter value

    SKIPCOND 400     // Check if the counter is zero
    JUMP ADD_LOOP    // If the counter is not zero, repeat the loop

    LOAD SUM         // Load the final sum
    OUTPUT           / Output the final sum
    HALT             / End the program

NUMBER, DEC 4       // The number to be added (4)
COUNTER, DEC 3      // The number of times to add the number (3)
SUM,     DEC 0      // The sum, initially 0
ONE,     DEC 1      // A constant representing the number 1
ZERO,    DEC 0      // A constant representing the number 0
